<!DOCTYPE HTML>
<html>
<head>
	<meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
	<title>Pong!</title>
	<!--[if IE]>
		<script src="http://html5shim.googlecode.com/svn/trunk/html5.js"></script>
		<style type="text/css">.clearfix { zoom: 1; display: block; }</style>

	<![endif]-->
	<style type="text/css">
		* { margin:0; padding:0; }
	
		html, body {
			height:98%;
			font-family: sans-serif;
		}
		
		h1 {
			text-align: center;
			color: #fff;
			font:2em bold sans-serif;
			margin-top:5px;
		}
	
			.spacer {
				width: 5%;
				display: inline-block;
			}
	
		body {
			background: #000;
			border:15px solid #fff;
		}
		
		#ball, .paddle {
			background: #fff;
		}
	
		#ball {
			height:50px;
			width:50px;
			position: absolute;
			top:50%;
			left:50%;
			margin: -25px 0 0 -25px;
		}
		
		.paddle {
			position: absolute;
			height:220px;
			width:30px;
			top:50%;
			margin-top:-110px;
		}
		
			#rightPaddle { right:25px; }
			#leftPaddle { left:25px; }
		
		#game-over {
			position: absolute;
			top:0;
			left:0;
			width:100%;
			height:100%;
			background: #000;
			color: #fff;
			text-align: center;
			padding-top:20%;
		}
		
			#game-over h2 {
				font-size: 5em;
			}
			
			#game-over a {
				margin-bottom: 1%;
				display: inline-block;
				font-size: 1.25em; 
			}
			
		button {
			background: #fff;
			border:0;
			padding: .5% 3%;
			font-size: 1.5em;
			color: #000;
			font-weight: bold;
		}
		
		.divider {
			height:100%;
			border:5px dashed #fff;
			left:50%;
			top:15px;
			margin-left:-5px;
			display: block;
			position: absolute;
		}
	</style>
</head>
<body>

	<section>
		<h1></h1>
		
		<span class="divider"></span>
		
		<span id="ball"></span>
		<span class="paddle" id="leftPaddle"></span>
		<span class="paddle" id="rightPaddle"></span>
	</section>
	
	<script src="jquery.min.js" type="text/javascript"></script>
	<script src="leap.js"></script>
	<script type="text/javascript">
		// usage: log('inside coolFunc',this,arguments);
		// http://paulirish.com/2009/log-a-lightweight-wrapper-for-consolelog/
		window.log = function(){
			log.history = log.history || [];   // store logs to an array for reference
			log.history.push(arguments);
			if(this.console){
		    		console.log( Array.prototype.slice.call(arguments) );
		  	}
		};
	
	
		var previousFrame     = null,
			leapEnabled       = true,
			gameEnabled       = true,
			ball 		      = null,
			leftPaddle	      = null,
			rightPaddle	      = null,
			leftPaddleStartY  = 0,
			rightPaddleStartY = 0,
			ballDirection     = -1,
			speed             = 5,
			ballSkew 	      = 0.3,
			lastRightYOffset  = 0.1,
			lastLeftYOffset   = 0.1,
			beep		      = new Audio("beep.wav"),
			leftPlayerScore   = 0,
			rightPlayerScore  = 0;
			
	
		$(function(){
			ball        = $('#ball');
			leftPaddle  = $('#leftPaddle');
			rightPaddle = $('#rightPaddle');
			
			
			// Allow the player to pause
			$(document).on('keyup', 'body', function(e){
				if(e.keyCode == 80){
					leapEnabled = !leapEnabled;
					gameEnabled = !gameEnabled;
					
					if(!gameEnabled){
						$('h1').html('GAME <span class="spacer"></span> PAUSED');
					}else {
						$('h1').html(rightPlayerScore + '<span class="spacer"></span>' + rightPlayerScore);
						moveBall();
					}
				} // if
			});
			
			
			// Tell the user they suck at life
			function gameOver(){
				leapEnabled = false;
				gameEnabled = false;
				console.log("Game over :(");
				
				// Display a message and allow them to reset
				$('body').append('<div id="game-over"><h2>Game Over</h2><br><a>&larr; Waggle your finger to restart, or click below &rarr;</a><br><button id="restart">Restart</button></div>');
				
			} // gameOver
			
			
			// Increment a player's score by 1
			function score(player){
				if(player == 'left'){
					leftPlayerScore++;
				}else if(player == 'right') {
					rightPlayerScore++;
				}
				
				$('h1').html(leftPlayerScore + '<span class="spacer"></span>' + rightPlayerScore);
			} // score
			
			
			// Animate the ball ever 10ms
			function moveBall(){
				if(gameEnabled){
					var offsetLeft = parseInt(ball.css('left').replace('px', '')),
						offsetTop  = parseInt(ball.css('top').replace('px', ''));
					
					// Ensure we have values for our offsets
					offsetLeft = (offsetLeft == null) ? ball.offset().left : offsetLeft;
					offsetTop = (offsetTop == null) ? ball.offset().top : offsetTop;
					
					// Is the skew causing it to go off the screen on the y-axis?
					if(offsetTop < 35 || offsetTop > ($('body').height() - 35)){
						ballSkew *= -1;
						
						// Correct the error
						offsetTop = (offsetTop + (30 * (ballSkew / Math.abs(ballSkew))));
						
						//lastLeftYOffset *= -1;
						//lastRightYOffset *= -1;
						beep.play();
					} // if
					
					// Track the ball
					var ballTop 	 = ball.offset().top,
						ballBottom 	 = ballTop + ball.height();
					
					// Is the ball about to go off the screen on the x-axis?
					if(offsetLeft < 75){
						// Hits the left side
						// Test if the leftPaddle was in the right place
						var leftPaddleTop 	 = leftPaddle.offset().top,
							leftPaddleBottom = leftPaddleTop + leftPaddle.height();
							
						// Have we hit the leftPaddle?
						if((leftPaddleTop - ball.height()) <= ballBottom && (leftPaddleBottom + ball.height()) >= ballBottom){
							ballDirection = (ballDirection == -1) ? 1 : -1;
							
							// Update the skew of the ball
						    ballSkew = (lastLeftYOffset / 15);
							beep.play();
							
							// Speed the ball up
							if(speed > 1){
								speed--;
							}							
						} else {
							score('right');
							restartGame();
							
							// Stop the current execution
							return 0;
						} // if	
						
					}else if(offsetLeft > ($('body').width()  - 50)){
						// Hits the right side
						// Test if the rightPaddle was in the right place
						var rightPaddleTop 	 = rightPaddle.offset().top,
							rightPaddleBottom = rightPaddleTop + rightPaddle.height();
						
						// Have we hit the rightPaddle?							
						if((rightPaddleTop - ball.height()) <= ballBottom && (rightPaddleBottom + ball.height()) >= ballBottom){
							ballDirection = (ballDirection == -1) ? 1 : -1;
							
							// Update the skew of the ball
						    ballSkew = (lastRightYOffset / 15);
							beep.play();
							
							// Speed the ball up
							if(speed > 1){
								speed--;
							}							
						} else {
							score('left');
							restartGame();
							
							// Stop the current execution
							return 0;
						} // if								
					}
				
					ball.animate({ 
						left: offsetLeft + ((speed + (10 - speed)) * ballDirection),
						top : offsetTop + ballSkew
					}, speed, function(){
						setTimeout(function(){ moveBall() }, 10);
					});			
				}else {
					console.log("The game isn't enabled :(");
				} // if
			} // moveBall
			
			
			var leftPaddleOrigin, rightPaddleOrigin;
			
			
			// Restart after a score increment
			function restartGame(){
				// Reset the skew
				ballSkew = 0.1;
				
				// Reset the ball
				ball.css({ top: '50%', left: '50%', marginLeft: -25, marginTop:-25 });
				
				// Reset the speed
				speed = 5;
				
				// Start the ball moving again
				setTimeout(function() { moveBall(); }, 1000);
			} // restartGame
			
			
			// Game initilisation method
			function startGame(){
				// Keep track of the paddles's starting positions
				leftPaddleOrigin  = leftPaddle.offset().top;
				rightPaddleOrigin = rightPaddle.offset().top;
			
				$('#game-over').remove();
				
				// Reset the score
				score();

				// Move the ball into position
				ball.css({ top: '50%', left: '50%', marginLeft: -25, marginTop:-25 });
				
				speed = 5;
				
				leapEnabled = true;
				gameEnabled = true;
				
				// Start the game
				moveBall();
			}
			
			
			// Allow the player to reset the game
			$('body').on('click', 'restart', function(){
				startGame();
			});
			

			// Allow Leap to move the paddles
			Leap.loop(function(frame){
				//Frame motion factors
				if(leapEnabled){
					// Make sure we have 2 fingers
					if (frame.pointables.length == 2){
					    // Get the 2 fingers for left and right
					    // Use the height of the browser to get a relative offset
					    var leftYOffset  = ((frame.pointables[0].tipPosition[1] * ($('body').height() / 160)) - $('body').height()) * -1,
					    	rightYOffset  = ((frame.pointables[1].tipPosition[1] * ($('body').height() / 160)) - $('body').height()) * -1;
					    
					    // Make our offset available to the game function
					    lastRightYOffset = rightYOffset;
					    lastLeftYOffset  = leftYOffset;							    
					    
					    // Has the left finger moved?
					    if(Math.abs(leftYOffset) > 1){
					    	var newYOffset = leftPaddleOrigin + leftYOffset;
					    
					    	// Is the paddle about to go off-screen?
					    	if(newYOffset >= 20 && (newYOffset + leftPaddle.height()) <= $('body').height()){
						    	// Move the paddle to the new position
						    	leftPaddle.offset({ top: leftPaddleOrigin + leftYOffset });
					    	} // if
					    } // if
					    
					    
						// Has the right finger moved?
					    if(Math.abs(rightYOffset) > 1){
					    	var newYOffset = rightPaddleOrigin + rightYOffset;
					    
					    	// Is the paddle about to go off-screen?
					    	if(newYOffset >= 20 && (newYOffset + rightPaddle.height()) <= $('body').height()){
						    	// Move the paddle to the new position
						    	rightPaddle.offset({ top: rightPaddleOrigin + rightYOffset });
					    	} // if
					    } // if					    
					} // if previousFrame					
				} // if leapEnabled
			});
			
			// Start the actual game
			startGame();
		}); 		
	</script>
</body>
</html>